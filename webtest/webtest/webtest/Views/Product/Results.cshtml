<!-- Dependencies needed for PagedList-->
@using webtest.Models;
@using PagedList;
@using PagedList.Mvc;
@using webtest.Models
@model IPagedList<webtest.Models.Book>
@{
    ViewBag.Title = "Results";
    Layout = "~/Views/Shared/_customLayout.cshtml";
}

<head>
    <link href="~/Content/SearchResults.css" rel="stylesheet" />
    <link href="~/Content/PagedList.css" rel="stylesheet" />
    @*ALERTIFY*@
    <link href="~/Content/alertify/alertify.bootstrap.css" rel="stylesheet" />
    <link href="~/Content/alertify/alertify.core.css" rel="stylesheet" />
    <link href="~/Content/alertify/alertify.default.css" rel="stylesheet" />
    <script src="~/Scripts/alertify/alertify.js"></script>
    <script src="~/Scripts/alertify/alertify.min.js"></script>
</head>

<div id="container">

    <!-- Results: hier worden alle resultaten geladen -->
    <div id="results">
        <div id="topBox">
            @using (Html.BeginForm("Results", "Product", FormMethod.Get))
            {
                <select id="paginationFilter" , onchange="setPaginationOrder()">
                    <option>Items Per Page</option>
                    <option value="5" @if (@Request.QueryString["Pagination"] == "5") { <text> selected="selected" </text> }> 5</option>
                    <option value="10" @if (@Request.QueryString["Pagination"] == "10") { <text> selected="selected" </text> }> 10</option>
                    <option value="20" @if (@Request.QueryString["Pagination"] == "20") { <text> selected="selected" </text> }> 20</option>
                    <option value="40" @if (@Request.QueryString["Pagination"] == "40") { <text> selected="selected" </text> }> 40</option>
                </select>
                <a id="txtResultsTitle">Results</a>
                <select id="orderFilter" , onchange="setPaginationOrder()">
                    <option>Order By</option>
                    <option value="Price: Ascending" @if (@Request.QueryString["Order"] == "Price: Ascending") { <text> selected="selected" </text> }> Price: Ascending</option>
                    <option value="Price: Descending" @if (@Request.QueryString["Order"] == "Price: Descending") { <text> selected="selected" </text> }> Price: Descending</option>
                    <option value="Title: A - Z" @if (@Request.QueryString["Order"] == "Title: A - Z") { <text> selected="selected" </text> }> Title: A - Z</option>
                    <option value="Title: Z - A" @if (@Request.QueryString["Order"] == "Title: Z - A") { <text> selected="selected" </text> }> Title: Z - A</option>
                    <option value="Author: A - Z" @if (@Request.QueryString["Order"] == "Author: A - Z") { <text> selected="selected" </text> }> Author: A - Z</option>
                    <option value="Author: Z - A" @if (@Request.QueryString["Order"] == "Author: Z - A") { <text> selected="selected" </text> }> Author: Z - A</option>
                </select>
                <input id="orderInput" type="text" name="Order" , style="display:none">
                <input id="paginationInput" type="text" name="Pagination" , style="display:none">
                <input name="minPrice" , value="@Request.QueryString["minPrice"]" , style=" display:none">
                <input name="maxPrice" , value="@Request.QueryString["maxPrice"]" , style="display:none">
                <input name="Category" , value="@Request.QueryString["Category"]" , style=" display:none">
                <input name="Rating" ,value="@Request.QueryString["Rating"]" , style="display:none">

                <button id="submitOrderItems" , style="display:none"></button>
            }


        </div>

        <!-- Filters: Boven de results komt tevoorschijn kleiner dan 1100px -->
        <!-- PrijsFilter top -->
        <div id="filtersTop">
            <label id="filterTopTitle">Price</label>
            <label id="filterTopTitle">Rating</label> <br />
            @using (Html.BeginForm("Results", "Product", FormMethod.Get))
            {
                @Html.Hidden("search", Request.QueryString["search"])
                <div id="priceFilterTop">
                    <input id="priceTop" type="text" name="MinPrice" placeholder="Min Price" , value="@Request.QueryString["MinPrice"]">
                    <input id="priceTop" type="text" name="MaxPrice" placeholder="Max Price" , value="@Request.QueryString["MaxPrice"]">
                </div>
                <!-- Select rating top -->
                <select id="filterTopSelect">
                    <option>Select Rating</option>
                    <option value="1" @if (@Request.QueryString["Rating"] == "1") { <text> selected="selected" </text> }>1-2</option>
                    <option value="2" @if (@Request.QueryString["Rating"] == "2") { <text> selected="selected" </text> }>2-3</option>
                    <option value="3" @if (@Request.QueryString["Rating"] == "3") { <text> selected="selected" </text> }>3-4</option>
                    <option value="4" @if (@Request.QueryString["Rating"] == "4") { <text> selected="selected" </text> }>4-5</option>
                    <option value="5" @if (@Request.QueryString["Rating"] == "5") { <text> selected="selected" </text> }>5</option>
                </select>
                <!-- save button Top -->
                <input id="ratingInputTop" type="text" name="Rating" , style="display:none">
                <button id="btnSaveFiltersTop" , onclick="setRatingTop()"><i class="fa fa-check"></i></button>
            }
        </div>
        <img id="stripe" src="~/Content/Images/stripe.png" />

        <!-- SHOW PRODUCTS-->
        <!-- Check of er producten zijn gevonden-->
        @if (Model.Count == 0)
        {
            <text> No products found</text>
        }
        <!-- ForEachLoop door alle producten die zijn opgehaald uit de database.-->
        <!-- Elke product krijgt dezelfde opmaak in <div id="procuct"> ..... </div> -->
        <!-- Alle waardes worden opgehaald uit de database en ingevuld op de juiste plekken -->
        @foreach (var m in Model)
        {
            <!-- De ForEachLoop zorgt ervoor dat alle producten met verschillende waardes en dezelfde opmaak onder elkaar worden geplaatst.-->
            <div id="product">
                <a name="@m.Name"></a>
                <a href="@Url.Action("Index", "Product", new {Title = m.Name, isbn = m.ISBN})">
                    <img id="productImg" src="@m.Image_src" />
                </a>

                @*Een check of het book 0 stock heeft. Als de stock 0 is zal de prijs niet meer laten zien worden, en komt er een error message boven de titel.*@
                @if (m.Stock == 0)
                {
                    <label id="EmptyStock" style="font-weight:bold; text-align:center; color:#ff0000">The stock of this item has depleted.</label>
                }
                else
                {
                    <label id="price">€@m.Price</label>
                }

                <a href="@Url.Action("Index", "Product", new {Title = m.Name, isbn = m.ISBN}) " id="title">@m.Name</a>
                <!-- Change to author-->
                <label id="author">@m.Author</label>
                @{ DatabaseEntities1 _db = new DatabaseEntities1();
                    string starsPerc = "";

                    // Selects the rating based on the stars given in reviews
                    try
                    {
                        var rating = (from r in _db.Reviews
                                      where r.ISBN == m.ISBN
                                      select r.Rating).Average();
                        var stars = (rating * 20).ToString();
                        starsPerc = stars + "%";
                    }

                    // When there are no reviews yet then it takes the rating in Model.Books
                    catch
                    {
                        var stars = (m.Rating * 20).ToString();
                        starsPerc = stars + "%";
                    }
                }

                <label id="miLabel" class="star-ratings-sprite">
                    <span style="width:@starsPerc" class="star-ratings-sprite-rating"></span>
                </label>

                <label id="summary">
                    @{string mktText = m.Summary;
                        if (mktText == null)
                        {
                            mktText = "";
                        }
                        else
                        {
                            if (mktText.Length > 200)
                            {
                                int pos = mktText.LastIndexOf(" ", 200);

                                mktText = mktText.Substring(0, pos) + "...";
                            }
                        }
                    }
                    @mktText
                </label>
                <label id="priceSmall">@m.Price</label>
                <a href="@Url.Action("Index", "Product", new {Title = m.Name, isbn = m.ISBN}) " id="moreInfo">More info</a>

                @*LOAD FAVORITE BUTTONS*@
                @{
                    var db = new DatabaseEntities1();
                    if (Session["User_id"] != null)
                    {
                        var list = db.Favorites.Select(s => s);
                        double isbnD = Convert.ToDouble(m.ISBN);
                        int User_id = Convert.ToInt32(Session["User_id"]);

                        bool has = list.Any(cus => cus.ISBN == isbnD && cus.User_id == User_id);
                        //CHECKEN OF ISBN AL IN FAVORIETEN ZIT VAN DE GEBRUIKER.
                        if (has)
                        {
                            <a href="@Url.Action("Results", new { page = Request.QueryString["page"], search = Request.QueryString["search"], Category = Request.QueryString["Category"] , Order = Request.QueryString["Order"] ,MinPrice = Request.QueryString["MinPrice"],
       MaxPrice = Request.QueryString["MaxPrice"], Rating = Request.QueryString["Rating"], ISBN = m.ISBN.ToString(), type = "favorite"})#@m.Name " id="btnWishList" class="fa fa-heart" onclick="return true" />
                        }
                        else
                        {
                            <a href="@Url.Action("Results", new { page = Request.QueryString["page"], search = Request.QueryString["search"], Category = Request.QueryString["Category"] , Order = Request.QueryString["Order"] ,MinPrice = Request.QueryString["MinPrice"],
       MaxPrice = Request.QueryString["MaxPrice"], Rating = Request.QueryString["Rating"], ISBN = m.ISBN.ToString(), type = "favorite"})#@m.Name " id="btnWishList" class="fa fa-heart-o" onclick="return true" />
                        }
                    }
                }

                @** LOAD ADD CART BUTTONS*@

                @if (m.Stock != 0)
                {
                    if (Session["User_id"] != null)
                    {
                        var dbCart = new DatabaseEntities1();
                        var listCart = db.Carts.Select(s => s);
                        double isbnDCart = Convert.ToDouble(m.ISBN);
                        int User_id_Cart = Convert.ToInt32(Session["User_id"]);

                        bool hasCart = listCart.Any(cus => cus.ISBN == isbnDCart && cus.User_id == User_id_Cart);

                        if (hasCart)
                        {
                            <a href="@Url.Action("Results", "Product", new {page = Request.QueryString["page"], search = Request.QueryString["search"],Category = Request.QueryString["Category"] , Order = Request.QueryString["Order"] ,MinPrice = Request.QueryString["MinPrice"],
       MaxPrice = Request.QueryString["MaxPrice"], Rating = Request.QueryString["Rating"], isbn = m.ISBN, type = "cart"})#@m.Name" id="btnCart">Remove From Cart</a>
                        }
                        else
                        {
                            <a href="@Url.Action("Results", "Product", new {page = Request.QueryString["page"], search = Request.QueryString["search"],Category = Request.QueryString["Category"] , Order = Request.QueryString["Order"] ,MinPrice = Request.QueryString["MinPrice"],
       MaxPrice = Request.QueryString["MaxPrice"], Rating = Request.QueryString["Rating"], isbn = m.ISBN, type = "cart"})#@m.Name" id="btnCart">Add to Cart</a>
                        }

                    }
                    else
                    {
                        if (Session["shoppingCart"] == null)
                        {
                            <a href="@Url.Action("Results", "Product", new {page = Request.QueryString["page"], search = Request.QueryString["search"],Category = Request.QueryString["Category"] , Order = Request.QueryString["Order"] ,MinPrice = Request.QueryString["MinPrice"],
                                MaxPrice = Request.QueryString["MaxPrice"], Rating = Request.QueryString["Rating"], isbn = m.ISBN, type = "cart"})#@m.Name" id="btnCart">Add to Cart</a>
                        }
                        else
                        {
                            List<string> isbns = Session["shoppingCart"].ToString().Split(',').ToList();

                            if (isbns.Contains(m.ISBN.ToString()))
                            {
                                <a href="@Url.Action("Results", "Product", new {page = Request.QueryString["page"], search = Request.QueryString["search"],Category = Request.QueryString["Category"] , Order = Request.QueryString["Order"] ,MinPrice = Request.QueryString["MinPrice"],
       MaxPrice = Request.QueryString["MaxPrice"], Rating = Request.QueryString["Rating"], isbn = m.ISBN, type = "cart"})#@m.Name" id="btnCart">Remove From Cart</a>
                            }
                            else
                            {
                                <a href="@Url.Action("Results", "Product", new {page = Request.QueryString["page"], search = Request.QueryString["search"],Category = Request.QueryString["Category"] , Order = Request.QueryString["Order"] ,MinPrice = Request.QueryString["MinPrice"],
       MaxPrice = Request.QueryString["MaxPrice"], Rating = Request.QueryString["Rating"], isbn = m.ISBN, type = "cart"})#@m.Name" id="btnCart">Add to Cart</a>
                            }
                        }
                    }

                }

                <a href="@Url.Action("Index", "Product", new {Title = m.Name, isbn = m.ISBN})" id="moreInfoSmall">More info</a>
                <img id="stripe" src="~/Content/Images/stripe.png" />

            </div>
        }
        <!-- Dit is de PagedListPager die  ervoor zorgt dat er maar 3 items per pagina worden laten zien.-->
        <!-- De PagedListPager past zich automatisch aan en zal de pagina's zelf weergeven.-->
        <!-- De CSS kan gevonden worden in ~Content\PagedList-->
        @Html.PagedListPager(Model, page => Url.Action("Results", new { page, search = Request.QueryString["search"],Category = Request.QueryString["Category"] , Order = Request.QueryString["Order"] ,MinPrice = Request.QueryString["MinPrice"],
       MaxPrice = Request.QueryString["MaxPrice"], Rating = Request.QueryString["Rating"], Pagination = Request.QueryString["Pagination"]}), new PagedListRenderOptions() { Display = PagedListDisplayMode.IfNeeded })

    </div>
    <!-- filters: links van het scherm onder top categories verdwijnt bij 1100px -->
    <div id="filters">
        <a id="txtSearchTitle">FILTERS</a>

        @using (Html.BeginForm("Results", "Product", FormMethod.Get))
        {

            @Html.Hidden("search", Request.QueryString["search"])

            <label>Price</label><br />
            <div id="priceFilter">
                <input id="minPrice" type="number" name="MinPrice" min="0" onchange="Pricecheck()" placeholder="Min Price" onkeypress="return (event.charCode == 8 || event.charCode == 0 || event.charCode == 13) ? null : event.charCode >= 48 && event.charCode <= 57" , value="@Request.QueryString["MinPrice"]">
                <input id="maxPrice" type="number" name="MaxPrice" min="0" onchange="Pricecheck()" placeholder="Max Price" onkeypress="return (event.charCode == 8 || event.charCode == 0 || event.charCode == 13) ? null : event.charCode >= 48 && event.charCode <= 57" , value="@Request.QueryString["MaxPrice"]">
            </div>

            <label>Category</label>
            <select id="categoryFilter" , class="dropdownFilters">
                <option>Select Category</option>
                <option value="Art & Photography" @if (@Request.QueryString["Category"] == "Art & Photography") { <text> selected="selected" </text> }> Art & Photography</option>
                <option value="Biography" @if (@Request.QueryString["Category"] == "Biography") { <text> selected="selected" </text> }> Biography</option>
                <option value="Business" @if (@Request.QueryString["Category"] == "Business") { <text> selected="selected" </text> }> Business</option>
                <option value="Diet & Fitness" @if (@Request.QueryString["Category"] == "Diet & Fitness") { <text> selected="selected" </text> }> Diet & Fitness</option>
                <option value="Education" @if (@Request.QueryString["Category"] == "Education") { <text> selected="selected" </text> }> Education</option>
                <option value="Fiction" @if (@Request.QueryString["Category"] == "Fiction") { <text> selected="selected" </text> }> Fiction</option>
                <option value="Food & Drink" @if (@Request.QueryString["Category"] == "Food & Drink") { <text> selected="selected" </text> }> Food & Drink</option>
                <option value="History & Politics" @if (@Request.QueryString["Category"] == "History & Politics") { <text> selected="selected" </text> }> History & Politics</option>
                <option value="Home & Garden" @if (@Request.QueryString["Category"] == "Home & Garden") { <text> selected="selected" </text> }> Home & Garden</option>
                <option value="Mind Body Spirit" @if (@Request.QueryString["Category"] == "Mind Body Spirit") { <text> selected="selected" </text> }> Mind Body Spirit</option>
                <option value="Parenting" @if (@Request.QueryString["Category"] == "Parenting") { <text> selected="selected" </text> }> Parenting</option>
                <option value="Science & Nature" @if (@Request.QueryString["Category"] == "Science & Nature") { <text> selected="selected" </text> }> Science & Nature</option>
                <option value="Sports" @if (@Request.QueryString["Category"] == "Sports") { <text> selected="selected" </text> }> Sports</option>
                <option value="Style & Beauty" @if (@Request.QueryString["Category"] == "Style & Beauty") { <text> selected="selected" </text> }> Style & Beauty</option>
            </select>

            <label>Rating</label>
            <select id="ratingFilter" , class="dropdownFilters">
                <option>Select Rating</option>
                <option value="1" @if (@Request.QueryString["Rating"] == "1") { <text> selected="selected" </text> }>1</option>
                <option value="2" @if (@Request.QueryString["Rating"] == "2") { <text> selected="selected" </text> }>2</option>
                <option value="3" @if (@Request.QueryString["Rating"] == "3") { <text> selected="selected" </text> }>3</option>
                <option value="4" @if (@Request.QueryString["Rating"] == "4") { <text> selected="selected" </text> }>4</option>
                <option value="5" @if (@Request.QueryString["Rating"] == "5") { <text> selected="selected" </text> }>5</option>
            </select>


            <input id="orderInput" type="text" name="Order" , value="@Request.QueryString["Order"]" , style="display:none">
            <input id="paginationInput" type="text" name="Pagination" , value="@Request.QueryString["Pagination"]" , style="display:none">
            <input id="categoryInput" type="text" name="Category" , style="display:none">
            <input id="ratingInput" type="text" name="Rating" , style="display:none">

            <button id="btnSaveFilters" , onclick="setRating()">Apply Filters</button>
            @Html.Raw(TempData["favo"])

        }
        <script>
            function setRating() {
                // GEEF RATING WAARDE MEE AAN URL
                var rating = document.getElementById("ratingFilter");
                document.getElementById("ratingInput").value = rating.options[rating.selectedIndex].value;

                //SET CATEGORIE
                var category = document.getElementById("categoryFilter");
                document.getElementById("categoryInput").value = category.options[category.selectedIndex].value;

                var order = document.getElementById("orderFilter");
                document.getElementById("orderInput").value = order.options[order.selectedIndex].value;

            }
            function setRatingTop() {
                var rating = document.getElementById("filterTopSelect");
                document.getElementById("ratingInputTop").value = rating.options[rating.selectedIndex].value;
            }

            function setPaginationOrder() {
                var orderby = document.getElementById('orderFilter');
                document.getElementById('orderInput').value = orderby.options[orderby.selectedIndex].value;
                var pagination = document.getElementById('paginationFilter');
                document.getElementById('paginationInput').value = pagination.options[pagination.selectedIndex].value;
                document.getElementById('submitOrderItems').click();
            }

            function Pricecheck() {
                var minimum = parseInt(document.getElementById("minPrice").value, 10);
                var maximum = parseInt(document.getElementById("maxPrice").value, 10);

                if (minimum > maximum) {
                    minimum = maximum - 1;
                }

                document.getElementById("minPrice").value = minimum;
                document.getElementById("maxPrice").value = maximum;

            }
        </script>

    </div>
</div>
